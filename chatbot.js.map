{"version":3,"file":"chatbot.js","sourceRoot":"","sources":["src/chatbot.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAG1D,IAAa,SAAS,GAAtB,MAAa,SAAU,SAAQ,UAAU;IAAzC;;QAeE,kEAAkE;QAClE,2BAA2B;QACf,aAAQ,GAAG,OAAO,CAAC;QACnB,WAAM,GAAG,OAAO,CAAC;IAqB/B,CAAC;IAnBC,qEAAqE;IACrE,kEAAkE;IAClE,yDAAyD;IACzD,yEAAyE;IACzE,wBAAwB;IACf,MAAM;QACb,OAAO,IAAI,CAAA;qBACM,IAAI,CAAC,YAAY;WAC3B,IAAI,CAAC,QAAQ;+BACO,IAAI,CAAC,MAAM;;KAErC,CAAC;IACJ,CAAC;IAED,oEAAoE;IACpE,oCAAoC;IACpC,YAAY;QACV,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;IAC3D,CAAC;CACF,CAAA;AAtCC,qEAAqE;AACrE,sEAAsE;AACtE,6BAA6B;AACb,gBAAM,GAAG,GAAG,CAAA;;;;;;;;;GAS1B,CAAA;AAIU;IAAX,QAAQ,EAAE;2CAAoB;AACnB;IAAX,QAAQ,EAAE;yCAAkB;AAlBlB,SAAS;IADrB,aAAa,CAAC,UAAU,CAAC;GACb,SAAS,CAuCrB;SAvCY,SAAS","sourcesContent":["import {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n@customElement('chat-bot')\nexport class MyElement extends LitElement {\n  // Styles are scoped to this element: they won't conflict with styles\n  // on the main page or in other components. Styling API can be exposed\n  // via CSS custom properties.\n  static override styles = css`\n    :host {\n      display: inline-block;\n      padding: 10px;\n      background: lightgray;\n    }\n    .planet {\n      color: var(--planet-color, blue);\n    }\n  `;\n\n  // Define reactive properties--updating a reactive property causes\n  // the component to update.\n  @property() greeting = 'Hello';\n  @property() planet = 'World';\n\n  // The render() method is called any time reactive properties change.\n  // Return HTML in a string template literal tagged with the `html`\n  // tag function to describe the component's internal DOM.\n  // Expressions can set attribute values, property values, event handlers,\n  // and child nodes/text.\n  override render() {\n    return html`\n      <span @click=${this.togglePlanet}\n        >${this.greeting}\n        <span class=\"planet\">${this.planet}</span>\n      </span>\n    `;\n  }\n\n  // Event handlers can update the state of @properties on the element\n  // instance, causing it to re-render\n  togglePlanet() {\n    this.planet = this.planet === 'World' ? 'Mars' : 'World';\n  }\n}\n"]}