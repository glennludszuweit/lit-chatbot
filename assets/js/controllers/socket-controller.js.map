{"version":3,"file":"socket-controller.js","sourceRoot":"","sources":["../../../src/assets/js/controllers/socket-controller.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @description Handles actions interacting with the socket connection and session. Holds session-related values\n */\nclass SocketController {\n  constructor() {\n    this.SESSION_ENUM = {\n      MESSAGES: \"converseMessages\",\n      CONVERSE_SESSION: \"converseSession\",\n      DETECTED_LANGUAGE: \"detectedLanguage\",\n    };\n    this.delayFlag = Boolean;\n  }\n\n  /**\n   * @description Initialises a socket connection between converse and the browser.\n   * Also contains logic as to what should happen on socket events\n   * @param event (optional) - if passed, then start a proactive conversation based on the event\n   */\n  async initSocket(event, resetChat = false) {\n    chatController.init();\n\n    if (window && window.chatSettings && window.chatSettings.endpoint) {\n      this.endpoint = window.chatSettings.endpoint;\n    }\n\n    if (window && window.chatSettings && window.chatSettings.path) {\n      this.path = window.chatSettings.path;\n    }\n\n    if (window && window.chatSettings && window.chatSettings.masterBotID) {\n      this.masterBotID = window.chatSettings.masterBotID;\n    }\n\n    if (window && window.chatSettings && window.chatSettings.storageType) {\n      this.storageType = window.chatSettings.storageType;\n    }\n\n    // make call to handleSession endpoint to set up session id in httpOnly cookies.\n    // don't make the call if session id is provided in query params\n    // flag to check if the greeting message has been sent to the user on web socket connection\n    let getGreetings = true;\n\n    this.socket = io(this.endpoint, {\n      path: this.path,\n      transports: [\"websocket\"],\n    });\n\n    // init socket connection\n    // will set a session\n    this.socket.on(\"connect\", () => {\n      chatController.hideErrorMessage();\n      console.log(\"websocket connected\");\n      // socket connected\n      const params = {\n        input: \"welcome\",\n        masterBotId: this.masterBotID,\n        token: this.token,\n        sessionToken: this.sessionToken,\n        messageFromClient: resetChat,\n      };\n\n      if (event) {\n        // start proactive conversation if event has been passed\n        params.input = event;\n        params.proactive = true;\n      }\n      /**\n       * if the greeting has not yet been sent to the client then send the welcome message when\n       * socket is connected\n       */\n\n      if (getGreetings) {\n        getGreetings = false;\n        this.sendMessageToServer(JSON.stringify(params));\n      }\n    });\n\n    this.socket.on(\"disconnect\", () => {\n      console.log(\"websocket disconnected\");\n      if (this.socketResetting) {\n        this.socketResetting = false;\n      } else {\n        chatController.showErrorMessage(\n          \"Internet connectivity issue, reconnecting to the server\"\n        );\n      }\n    });\n\n    this.socket.on(\"connect_error\", (err) => {\n      console.error(\"websocket connection failed\", err);\n    });\n\n    // listen for incoming messages\n    this.socket.on(\"webOut\", (message) => {\n      /**\n       * If an incoming message is received then set the flag used for recording if greeting\n       * is needed to false - useful in case of any connection issues\n       * with the web socket to determine if the greeting is to be sent again\n       */\n      getGreetings = false;\n\n      chatController.handleIncomingMessage(message);\n\n      if (event) {\n        // open chat window if event has been passed\n        chatController.openChatWindow();\n      }\n    });\n\n    // listen for conversation history\n    this.socket.on(\"fetchConversationHistory\", (conversationHistory) => {\n      try {\n        if (conversationHistory) {\n          for (let m = 0; m < conversationHistory.length; m++) {\n            if (\n              conversationHistory[m].userMessage ||\n              conversationHistory[m].botResponse\n            ) {\n              conversationHistory[m][\"isAgentMsg\"] = conversationHistory[m]\n                .userMessage\n                ? false\n                : true;\n              conversationHistory[m][\"content\"] = conversationHistory[m]\n                .userMessage\n                ? conversationHistory[m].userMessage\n                : { response: [conversationHistory[m].botResponse] };\n              chatController.displayMessageOnChat(\n                conversationHistory[m].isAgentMsg,\n                conversationHistory[m].content\n              );\n              chatController.scrollToBottom();\n            }\n          }\n        }\n      } catch (err) {}\n    });\n\n    this.socket.on(\"updateSessionToken\", (sessionDetailsIn) => {\n      try {\n        // update session cookie\n        const sessionTokenDetails = {\n          sessionToken: sessionDetailsIn,\n        };\n        if (this.storageType && this.storageType === \"sessionStorage\") {\n          sessionStorage.setItem(\n            this.SESSION_ENUM.CONVERSE_SESSION,\n            JSON.stringify(sessionTokenDetails)\n          );\n        } else {\n          localStorage.setItem(\n            this.SESSION_ENUM.CONVERSE_SESSION,\n            JSON.stringify(sessionTokenDetails)\n          );\n        }\n      } catch (err) {}\n    });\n\n    const input = document.querySelector(\"#user-input\");\n    input.addEventListener(\"keyup\", (e) => {\n      if (e.currentTarget.value.trim().length === 0) {\n        document.getElementById(\"chat-input-send\").disabled = true;\n      } else {\n        document.getElementById(\"chat-input-send\").disabled = false;\n      }\n    });\n  }\n\n  /**\n   * Sends message to server\n   * @param {Object} message\n   */\n  sendMessageToServer(message) {\n    this.delayFlag = false;\n    this.socket.emit(\"webIn\", {\n      message: message,\n      sourceField: window.location.href,\n    });\n    // scroll to bottom whenever sending a message\n    chatController.scrollToBottom();\n  }\n\n  /**\n   * Sends the users input to the chat server\n   * @param {String} text\n   * @param form submitted form data\n   */\n  sendUserMessageToServer(text, form) {\n    let userMsg;\n    let converseSession;\n    if (!text) {\n      userMsg = chatController.shadowRootDoc.querySelector(\"#user-input\").value;\n      chatController.shadowRootDoc.querySelector(\"#user-input\").value = \"\";\n    } else {\n      userMsg = text;\n    }\n\n    console.log(userMsg);\n\n    if (userMsg) {\n      // if user message was added by datepicker, then remove it from messages container\n      const datepicker =\n        chatController.shadowRootDoc.querySelector(\"#datepicker\");\n      if (datepicker) datepicker.parentNode.removeChild(datepicker);\n\n      chatController.displayMessageOnChat(false, userMsg.name || userMsg);\n      chatController.showTypingIndicator();\n\n      const params = {\n        input: userMsg.value || userMsg,\n        masterBotId: this.masterBotID,\n        token: this.token,\n        sessionToken: this.sessionToken,\n        messageFromClient: true,\n      };\n      try {\n        if (this.storageType && this.storageType === \"sessionStorage\") {\n          converseSession = sessionStorage.getItem(\n            this.SESSION_ENUM.CONVERSE_SESSION\n          );\n        } else {\n          converseSession = localStorage.getItem(\n            this.SESSION_ENUM.CONVERSE_SESSION\n          );\n        }\n      } catch (err) {}\n\n      if (converseSession) {\n        converseSession = JSON.parse(converseSession);\n        params.sessionToken = converseSession.sessionToken;\n      }\n\n      if (form) params.form = form;\n\n      this.sendMessageToServer(JSON.stringify(params));\n    }\n  }\n\n  /**\n   * @description responsible for resetting the socket connection\n   * @param data (optional) - contains optional parameters to initiate new socket connection\n   */\n  async resetConversation(data = {}) {\n    if (this.storageType && this.storageType === \"sessionStorage\") {\n      sessionStorage.removeItem(this.SESSION_ENUM.CONVERSE_SESSION);\n      sessionStorage.removeItem(this.SESSION_ENUM.MESSAGES);\n    } else {\n      localStorage.removeItem(this.SESSION_ENUM.CONVERSE_SESSION);\n      localStorage.removeItem(this.SESSION_ENUM.MESSAGES);\n    }\n    this.sessionToken = undefined;\n    if (!this.isResettingConversion) {\n      this.isResettingConversion = true;\n      if (data.resetChat === undefined) data.resetChat = true;\n\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.get(\"sessionToken\") && !data.resetButtonClicked) {\n        data.resetChat = false;\n      }\n\n      this.socketResetting = true;\n      if (!data.keepChatMsgs) chatController.clearMessages();\n      if (this.socket) await this.socket.disconnect();\n      await this.initSocket(data.event, data.resetChat);\n      // persist chat history\n      this.isResettingConversion = false;\n    }\n  }\n\n  /**\n   * @description responsible for adding time to session for bot message timestamp\n   * @param time - contains parameter to handle session time\n   */\n  addTimeToSession(time) {\n    let sessionMessages;\n    try {\n      if (this.storageType && this.storageType === \"sessionStorage\") {\n        sessionMessages = JSON.parse(\n          sessionStorage.getItem(this.SESSION_ENUM.MESSAGES)\n        );\n      } else {\n        sessionMessages = JSON.parse(\n          localStorage.getItem(this.SESSION_ENUM.MESSAGES)\n        );\n      }\n    } catch (err) {}\n\n    try {\n      if (sessionMessages) {\n        for (var i = 0; i < sessionMessages.length; i++) {\n          if (sessionMessages[i].isAgentMsg === true) {\n            if (sessionMessages[i].hasOwnProperty(\"time\")) {\n              //do nothing\n            } else {\n              if (\n                sessionMessages[i].content.response[0] ===\n                \"Was your experience today helpful?\"\n              ) {\n                //do nothing\n              } else {\n                sessionMessages[i].time = time;\n              }\n            }\n          }\n        }\n\n        // update session\n        if (this.storageType && this.storageType === \"sessionStorage\") {\n          sessionStorage.setItem(\n            this.SESSION_ENUM.MESSAGES,\n            JSON.stringify(sessionMessages)\n          );\n        } else {\n          localStorage.setItem(\n            this.SESSION_ENUM.MESSAGES,\n            JSON.stringify(sessionMessages)\n          );\n        }\n      } else {\n        // first message when session has been created\n        // create new array of converseMessages in the session\n        if (this.storageType && this.storageType === \"sessionStorage\") {\n          sessionStorage.setItem(\n            this.SESSION_ENUM.MESSAGES,\n            JSON.stringify([message])\n          );\n        } else {\n          localStorage.setItem(\n            this.SESSION_ENUM.MESSAGES,\n            JSON.stringify([message])\n          );\n        }\n      }\n    } catch (err) {}\n  }\n}\n\nconst socketController = new SocketController();\n\n/**\n * Browser Shims\n */\nURL = window.URL || window.webkitURL;\n\nchatController.initChatWindow();\nchatController.openConverse();\nchatController.maximizeChat();\n"]}